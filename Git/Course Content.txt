
- Section 1 - Course Orientation

- Section 2 - Introducing...Git!

- Section 3 - Installation & Setup

- Section 4 - The Very Basics Of Git Adding & Committing
- What Is A Git Repo
- Our First Commands Git Init and Git Status
- The Mysterious .Git Folder
- A Common Early Git Mistake
- The Committing Workflow Overview
- Staging Changes With Git Add
- Finally, The Git Commit Command!
- The Git Log Command (And More Committing)
- Committing Exercise


- Section 5 - Commits In Detail (And Related Topics)
- Navigating The Git Documentation
- Keeping Your Commits Atomic
- Commit Messages Present Or Past Tense
- Escaping VIM & Configuring Git's Default Editor
- A Closer Look At The Git Log Command
- Committing With A GUI
- Fixing Mistakes With Amend
- Ignoring Files w .gitignore


- Section 6 - Working With Branches
- Introducing Branches
- The Master Branch (Or Is It Main)
- What On Earth Is HEAD
- Viewing All Branches With Git Branch
- Creating & Switching Branches
- More Practice With Branching
- Another Option Git Checkout Vs. Git Switch
- Switching Branches With Unstaged Changes
- Deleting & Renaming Branches
- How Git Stores HEAD & Branches
- Branching Exercise


- Section 7 - Merging Branches, Oh Boy!
- An Introduction To Merging
- Performing A Fast Forward Merge
- Visualizing Merges
- Generating Merge Commits
- Oh No! Merge Conflicts!
- Resolving Merge Conflicts
- Using VSCode To Resolve Conflicts
- Merging Exercise


- Section 8 - Comparing Changes With Git Diff
- Introducing The Git Diff Command
- A Guide To Reading Diffs
- Viewing Unstaged Changes
- Viewing Working Directory Changes
- Viewing Staged Changes
- Diffing Specific Files
- Comparing Changes Across Branches
- Comparing Changes Across Commits
- Visualizing Diffs With GUIs
- Diff Exercise


- Section 9 - The Ins and Outs of Stashing
- Why We Need Git Stash
- Stashing Basics Git Stash Save & Pop
- Practicing With Git Stash
- Git Stash Apply
- Working With Multiple Stashes
- Dropping & Clearing The Stash
- Stashing Exercise


- Section 10 - Undoing Changes & Time Traveling
- Checking Out Old Commits
- Re-Attaching Our Detached HEAD!
- Referencing Commits Relative to HEAD
- Discarding Changes With Git Checkout
- Un-Modifying With Git Restore
- Un-Staging Changes With Git Restore
- Undoing Commits With Git Reset
- Reverting Commits With...Git Revert
- Undoing Changes Exercise


- Section 11 - Github The Basics
- What Does Github Do For Us
- Why You Should Use Github!
- Cloning Github Repos With Git Clone
- Cloning Non-Github Repos
- Github Setup SSH Config
- Creating Our First Github Repo!
- A Crash Course on Git Remotes
- Introducing Git Push
- Touring A Github Repo
- Practice With Git Push
- A Closer Look At Git Push
- What does git push -u mean
- Another Github Workflow Cloning First
- Main & Master Github Default Branches
- Github Basics Exercise


- Section 12 - Fetching & Pulling
- Remote Tracking Branches WTF Are They
- Checking Out Remote Tracking Branches
- Working With Remote Branches
- Git Fetch The Basics
- Demonstrating Git Fetch
- Git Pull The Basics
- Git Pull & Merge Conflicts
- A Shorter Syntax For Git Pull


- Section 13 - Github Grab Bag Odds & Ends
- Github Repo Visibility Public Vs. Private
- Adding Github Collaborators
- Github Collaboration Demo
- What are READMEs
- A Markdown Crash Course
- Adding a README To A Project
- Creating Github Gists
- Introducing Github Pages
- Github Pages Demo


- Section 14 - Git Collaboration Workflows
- The Pitfalls Of A Centralized Workflow
- Centralized Workflow Demonstration
- The All-Important Feature Branch Workflow
- Feature Branch Workflow Demo
- Merging Feature Branches
- Introducing Pull Requests
- Making Our First Pull Request
- Merging Pull Requests With Conflicts
- Configuring Branch Protection Rules
- Introducing Forking
- Forking Demonstration
- The Fork & Clone Workflow
- Fork & Clone Workflow Demonstration


- Section 15 - Rebasing The Scariest Git Command
- Why is Rebasing Scary Is it
- Comparing Merging & Rebasing
- Rebase Demo Pt 1 Setup & Merging
- Rebasing Demo Pt 2 Actually Rebasing
- The Golden Rule When NOT to Rebase
- Handling Conflicts & Rebasing


- Section 16 - Cleaning Up History With Interactive Rebase
- Introducing Interactive Rebase
- Rewording Commits With Interactive Rebase
- Fixing Up & Squashing Commits With Interactive Rebase
- Dropping Commits With Interactive Rebase


- Section 17 - Git Tags Marking Important Moments In History
- The Idea Behind Git Tags
- A Side Note On Semantic Versioning
- Viewing & Searching Tags
- Comparing Tags With Git Diff
- Creating Lightweight Tags
- Creating Annotated Tags
- Tagging Previous Commits
- Replacing Tags With Force
- Deleting Tags
- IMPORTANT Pushing Tags


- Section 18 - Git Behind The Scenes - Hashing & Objects
- Working With The Local Config File
- Inside Git The Refs Directory
- Inside Git The HEAD file
- Inside Git The Objects Directory
- A Crash Course On Hashing Functions
- Git As A Key-Value Datastore
- Hashing With Git Hash-Object
- Retrieving Data With Git Cat-File
- Deep Dive Into Git Objects Blobs
- Deep Dive Into Git Objects Trees
- Deep Dive Into Git Objects Commits


- Section 19 - The Power of Reflogs - Retrieving Lost Work
- Introducing Reflogs
- The Limitations of Reflogs
- The Git Reflog Show Command
- Passing Reflog References Around
- Time-Based Reflog Qualifiers
- Rescuing Lost Commits With Reflog
- Undoing A Rebase w Reflog - It's A Miracle!


- Section 20 - Writing Custom Git Aliases
- The Global Git Config File
- Writing Our First Git Alias
- Setting Aliases From The Command Line
- Aliases With Arguments
- Exploring Existing Useful Aliases Online



